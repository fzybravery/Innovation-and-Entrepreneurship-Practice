const chai = require("chai");
const path = require("path");
const { buildPoseidon } = require("circomlibjs");
const { F1Field, ZqField } = require("ffjavascript");

const wasm_tester = require("circom_tester").wasm;

const assert = chai.assert;

// 获取 Baby Jubjub 曲线的素数域
// 这是 Circom 中默认的有限域
async function getBabyJubJubField() {
    const poseidon = await buildPoseidon();
    return poseidon.F;
}

// Poseidon2 的 JavaScript 参考实现
// 注意：这必须与 Circom 电路中的逻辑完全匹配
async function poseidon2_js(preImage) {
    const F = await getBabyJubJubField();

    const t = 3;
    const R_F = 8;
    const R_P = 22;
    const rounds = R_F + R_P;
    const C = [
        0x00000000000000000000000000000000000000000000000000000000000000c0, 0x00000000000000000000000000000000000000000000000000000000000001c0, 0x00000000000000000000000000000000000000000000000000000000000002c0, 0x00000000000000000000000000000000000000000000000000000000000003c0, 0x00000000000000000000000000000000000000000000000000000000000004c0, 0x00000000000000000000000000000000000000000000000000000000000005c0, 0x00000000000000000000000000000000000000000000000000000000000006c0, 0x00000000000000000000000000000000000000000000000000000000000007c0, 0x00000000000000000000000000000000000000000000000000000000000008c0, 0x00000000000000000000000000000000000000000000000000000000000009c0, 0x0000000000000000000000000000000000000000000000000000000000000ac0, 0x0000000000000000000000000000000000000000000000000000000000000bc0, 0x00000000000000000000000000000000000000000000000000000000000000c1, 0x00000000000000000000000000000000000000000000000000000000000001c1, 0x00000000000000000000000000000000000000000000000000000000000002c1, 0x00000000000000000000000000000000000000000000000000000000000003c1, 0x00000000000000000000000000000000000000000000000000000000000004c1, 0x00000000000000000000000000000000000000000000000000000000000005c1, 0x00000000000000000000000000000000000000000000000000000000000006c1, 0x00000000000000000000000000000000000000000000000000000000000007c1, 0x00000000000000000000000000000000000000000000000000000000000008c1, 0x00000000000000000000000000000000000000000000000000000000000009c1, 0x0000000000000000000000000000000000000000000000000000000000000ac1, 0x0000000000000000000000000000000000000000000000000000000000000bc1, 0x00000000000000000000000000000000000000000000000000000000000000c2, 0x00000000000000000000000000000000000000000000000000000000000001c2, 0x00000000000000000000000000000000000000000000000000000000000002c2, 0x00000000000000000000000000000000000000000000000000000000000003c2, 0x00000000000000000000000000000000000000000000000000000000000004c2, 0x00000000000000000000000000000000000000000000000000000000000005c2, 0x00000000000000000000000000000000000000000000000000000000000006c2, 0x00000000000000000000000000000000000000000000000000000000000007c2, 0x00000000000000000000000000000000000000000000000000000000000008c2, 0x00000000000000000000000000000000000000000000000000000000000009c2, 0x0000000000000000000000000000000000000000000000000000000000000ac2, 0x0000000000000000000000000000000000000000000000000000000000000bc2, 0x00000000000000000000000000000000000000000000000000000000000000c3, 0x00000000000000000000000000000000000000000000000000000000000001c3, 0x00000000000000000000000000000000000000000000000000000000000002c3, 0x00000000000000000000000000000000000000000000000000000000000003c3, 0x00000000000000000000000000000000000000000000000000000000000004c3, 0x00000000000000000000000000000000000000000000000000000000000005c3, 0x00000000000000000000000000000000000000000000000000000000000006c3, 0x00000000000000000000000000000000000000000000000000000000000007c3, 0x00000000000000000000000000000000000000000000000000000000000008c3, 0x00000000000000000000000000000000000000000000000000000000000009c3, 0x0000000000000000000000000000000000000000000000000000000000000ac3, 0x0000000000000000000000000000000000000000000000000000000000000bc3, 0x00000000000000000000000000000000000000000000000000000000000000c4, 0x00000000000000000000000000000000000000000000000000000000000001c4, 0x00000000000000000000000000000000000000000000000000000000000002c4, 0x00000000000000000000000000000000000000000000000000000000000003c4, 0x00000000000000000000000000000000000000000000000000000000000004c4, 0x00000000000000000000000000000000000000000000000000000000000005c4, 0x00000000000000000000000000000000000000000000000000000000000006c4, 0x00000000000000000000000000000000000000000000000000000000000007c4, 0x00000000000000000000000000000000000000000000000000000000000008c4, 0x00000000000000000000000000000000000000000000000000000000000009c4, 0x0000000000000000000000000000000000000000000000000000000000000ac4, 0x0000000000000000000000000000000000000000000000000000000000000bc4, 0x00000000000000000000000000000000000000000000000000000000000000c5, 0x00000000000000000000000000000000000000000000000000000000000001c5, 0x00000000000000000000000000000000000000000000000000000000000002c5, 0x00000000000000000000000000000000000000000000000000000000000003c5, 0x00000000000000000000000000000000000000000000000000000000000004c5, 0x00000000000000000000000000000000000000000000000000000000000005c5, 0x00000000000000000000000000000000000000000000000000000000000006c5, 0x00000000000000000000000000000000000000000000000000000000000007c5, 0x00000000000000000000000000000000000000000000000000000000000008c5, 0x00000000000000000000000000000000000000000000000000000000000009c5, 0x0000000000000000000000000000000000000000000000000000000000000ac5, 0x0000000000000000000000000000000000000000000000000000000000000bc5, 0x00000000000000000000000000000000000000000000000000000000000000c6, 0x00000000000000000000000000000000000000000000000000000000000001c6, 0x00000000000000000000000000000000000000000000000000000000000002c6, 0x00000000000000000000000000000000000000000000000000000000000003c6, 0x00000000000000000000000000000000000000000000000000000000000004c6, 0x00000000000000000000000000000000000000000000000000000000000005c6, 0x00000000000000000000000000000000000000000000000000000000000006c6, 0x00000000000000000000000000000000000000000000000000000000000007c6, 0x00000000000000000000000000000000000000000000000000000000000008c6,
    ].map(c => F.e(BigInt(c)));
    
    let state = [F.zero, F.e(preImage), F.zero];

    for (let r = 0; r < rounds; r++) {
        // 1. Add Round Constants
        for (let i = 0; i < t; i++) {
            state[i] = F.add(state[i], C[r * t + i]);
        }

        // 2. S-Box
        const is_full_round = (r < R_F / 2) || (r >= R_F / 2 + R_P);
        if (is_full_round) {
            for (let i = 0; i < t; i++) {
                state[i] = F.pow(state[i], 5);
            }
        } else {
            state[0] = F.pow(state[0], 5);
        }

        // 3. Linear Layer
        const s0 = state[0];
        const s1 = state[1];
        const s2 = state[2];
        const s_sum = F.add(F.add(s0, s1), s2);

        if (is_full_round) {
            // M_E: s_i' = 5 * s_sum + s_i
            state[0] = F.add(F.mul(F.e(5), s_sum), s0);
            state[1] = F.add(F.mul(F.e(5), s_sum), s1);
            state[2] = F.add(F.mul(F.e(5), s_sum), s2);
        } else {
            // M_I: s_i' = s_sum + s_i
            state[0] = F.add(s_sum, s0);
            state[1] = F.add(s_sum, s1);
            state[2] = F.add(s_sum, s2);
        }
    }

    return F.toObject(state[0]);
}


describe("Poseidon2 Circom Test", function () {
    this.timeout(100000);

    it("Should correctly hash the input and match the JS implementation", async () => {
        const circuit = await wasm_tester(path.join(__dirname, "../circuits", "poseidon2.circom"));
        
        // 定义输入
        const preImage = 123;

        // 使用 JS 实现计算预期的哈希值
        const expectedHash = await poseidon2_js(preImage);

        // 准备电路输入
        const witness = await circuit.calculateWitness({ preImage: preImage }, true);
        
        // 断言：电路的输出（公开输入）应与预期哈希值匹配
        assert.equal(witness[1], expectedHash, "Circuit hash should match JS hash");
    });
});
