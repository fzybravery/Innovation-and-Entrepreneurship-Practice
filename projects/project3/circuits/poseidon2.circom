pragma circom 2.0.0;

/*
 * Poseidon2 哈希函数的 Circom 实现
 *
 * 参数:
 * t = 3 (状态宽度)
 * d = 5 (S-Box 指数)
 * R_F = 8 (全轮数)
 * R_P = 22 (半轮数)
 *
 * 这个电路证明了你知道一个私有输入 `preImage`，
 * 它的哈希值等于公共输入 `hash`。
 */

// 这是一个辅助模板，用于 S-Box 操作: out <== in^5
template SBox() {
    signal input in;
    signal output out;
    signal in2 = in * in;
    signal in4 = in2 * in2;
    out <== in4 * in;
}

// Poseidon2 置换函数
template Poseidon2_t3() {
    signal input in[1];
    signal output out;

    // --- 参数定义 ---
    var t = 3;
    var R_F = 8;
    var R_P = 22;
    var rounds = R_F + R_P;

    // --- 轮常数 (Round Constants) ---
    // 注意: 这些是为演示目的生成的示例常量，不应用于生产环境。
    // 在实际应用中，应使用官方或安全生成的常量。
    var C[81] = [
        0x00000000000000000000000000000000000000000000000000000000000000c0,
        0x00000000000000000000000000000000000000000000000000000000000001c0,
        0x00000000000000000000000000000000000000000000000000000000000002c0,
        0x00000000000000000000000000000000000000000000000000000000000003c0,
        0x00000000000000000000000000000000000000000000000000000000000004c0,
        0x00000000000000000000000000000000000000000000000000000000000005c0,
        0x00000000000000000000000000000000000000000000000000000000000006c0,
        0x00000000000000000000000000000000000000000000000000000000000007c0,
        0x00000000000000000000000000000000000000000000000000000000000008c0,
        0x00000000000000000000000000000000000000000000000000000000000009c0,
        0x0000000000000000000000000000000000000000000000000000000000000ac0,
        0x0000000000000000000000000000000000000000000000000000000000000bc0,
        0x00000000000000000000000000000000000000000000000000000000000000c1,
        0x00000000000000000000000000000000000000000000000000000000000001c1,
        0x00000000000000000000000000000000000000000000000000000000000002c1,
        0x00000000000000000000000000000000000000000000000000000000000003c1,
        0x00000000000000000000000000000000000000000000000000000000000004c1,
        0x00000000000000000000000000000000000000000000000000000000000005c1,
        0x00000000000000000000000000000000000000000000000000000000000006c1,
        0x00000000000000000000000000000000000000000000000000000000000007c1,
        0x00000000000000000000000000000000000000000000000000000000000008c1,
        0x00000000000000000000000000000000000000000000000000000000000009c1,
        0x0000000000000000000000000000000000000000000000000000000000000ac1,
        0x0000000000000000000000000000000000000000000000000000000000000bc1,
        0x00000000000000000000000000000000000000000000000000000000000000c2,
        0x00000000000000000000000000000000000000000000000000000000000001c2,
        0x00000000000000000000000000000000000000000000000000000000000002c2,
        0x00000000000000000000000000000000000000000000000000000000000003c2,
        0x00000000000000000000000000000000000000000000000000000000000004c2,
        0x00000000000000000000000000000000000000000000000000000000000005c2,
        0x00000000000000000000000000000000000000000000000000000000000006c2,
        0x00000000000000000000000000000000000000000000000000000000000007c2,
        0x00000000000000000000000000000000000000000000000000000000000008c2,
        0x00000000000000000000000000000000000000000000000000000000000009c2,
        0x0000000000000000000000000000000000000000000000000000000000000ac2,
        0x0000000000000000000000000000000000000000000000000000000000000bc2,
        0x00000000000000000000000000000000000000000000000000000000000000c3,
        0x00000000000000000000000000000000000000000000000000000000000001c3,
        0x00000000000000000000000000000000000000000000000000000000000002c3,
        0x00000000000000000000000000000000000000000000000000000000000003c3,
        0x00000000000000000000000000000000000000000000000000000000000004c3,
        0x00000000000000000000000000000000000000000000000000000000000005c3,
        0x00000000000000000000000000000000000000000000000000000000000006c3,
        0x00000000000000000000000000000000000000000000000000000000000007c3,
        0x00000000000000000000000000000000000000000000000000000000000008c3,
        0x00000000000000000000000000000000000000000000000000000000000009c3,
        0x0000000000000000000000000000000000000000000000000000000000000ac3,
        0x0000000000000000000000000000000000000000000000000000000000000bc3,
        0x00000000000000000000000000000000000000000000000000000000000000c4,
        0x00000000000000000000000000000000000000000000000000000000000001c4,
        0x00000000000000000000000000000000000000000000000000000000000002c4,
        0x00000000000000000000000000000000000000000000000000000000000003c4,
        0x00000000000000000000000000000000000000000000000000000000000004c4,
        0x00000000000000000000000000000000000000000000000000000000000005c4,
        0x00000000000000000000000000000000000000000000000000000000000006c4,
        0x00000000000000000000000000000000000000000000000000000000000007c4,
        0x00000000000000000000000000000000000000000000000000000000000008c4,
        0x00000000000000000000000000000000000000000000000000000000000009c4,
        0x0000000000000000000000000000000000000000000000000000000000000ac4,
        0x0000000000000000000000000000000000000000000000000000000000000bc4,
        0x00000000000000000000000000000000000000000000000000000000000000c5,
        0x00000000000000000000000000000000000000000000000000000000000001c5,
        0x00000000000000000000000000000000000000000000000000000000000002c5,
        0x00000000000000000000000000000000000000000000000000000000000003c5,
        0x00000000000000000000000000000000000000000000000000000000000004c5,
        0x00000000000000000000000000000000000000000000000000000000000005c5,
        0x00000000000000000000000000000000000000000000000000000000000006c5,
        0x00000000000000000000000000000000000000000000000000000000000007c5,
        0x00000000000000000000000000000000000000000000000000000000000008c5,
        0x00000000000000000000000000000000000000000000000000000000000009c5,
        0x0000000000000000000000000000000000000000000000000000000000000ac5,
        0x0000000000000000000000000000000000000000000000000000000000000bc5,
        0x00000000000000000000000000000000000000000000000000000000000000c6,
        0x00000000000000000000000000000000000000000000000000000000000001c6,
        0x00000000000000000000000000000000000000000000000000000000000002c6,
        0x00000000000000000000000000000000000000000000000000000000000003c6,
        0x00000000000000000000000000000000000000000000000000000000000004c6,
        0x00000000000000000000000000000000000000000000000000000000000005c6,
        0x00000000000000000000000000000000000000000000000000000000000006c6,
        0x00000000000000000000000000000000000000000000000000000000000007c6,
        0x00000000000000000000000000000000000000000000000000000000000008c6
    ];

    // --- 状态初始化 ---
    signal state[t];
    // 对于单个输入，我们将其放在 state[1]，其他位置为0，这是一种常见的填充方式
    state[0] <== 0;
    state[1] <== in[0];
    state[2] <== 0;

    // S-Box 实例
    component sboxes[t];
    for (var i = 0; i < t; i++) {
        sboxes[i] = SBox();
    }
    
    // --- Poseidon2 置换过程 ---
    for (var r = 0; r < rounds; r++) {
        // 1. 加轮常数 (Add Round Constants)
        for (var i = 0; i < t; i++) {
            state[i] <== state[i] + C[r*t + i];
        }

        // 2. S-Box 层
        var is_full_round = (r < R_F/2) || (r >= R_F/2 + R_P);
        if (is_full_round) {
            // 全轮 (Full rounds)
            for (var i = 0; i < t; i++) {
                sboxes[i].in <== state[i];
                state[i] <== sboxes[i].out;
            }
        } else {
            // 半轮 (Partial rounds)
            sboxes[0].in <== state[0];
            state[0] <== sboxes[0].out;
        }

        // 3. 线性层 (Linear Layer / Matrix Multiplication)
        var s0 = state[0];
        var s1 = state[1];
        var s2 = state[2];
        var s_sum = s0 + s1 + s2;

        if (is_full_round) {
            // 外部矩阵 M_E = [[6, 5, 5], [5, 6, 5], [5, 5, 6]]
            // 优化计算:
            // s_i' = 5 * s_sum + s_i
            state[0] <== 5 * s_sum + s0;
            state[1] <== 5 * s_sum + s1;
            state[2] <== 5 * s_sum + s2;
        } else {
            // 内部矩阵 M_I = [[2, 1, 1], [1, 2, 1], [1, 1, 2]]
            // 优化计算:
            // s_i' = s_sum + s_i
            state[0] <== s_sum + s0;
            state[1] <== s_sum + s1;
            state[2] <== s_sum + s2;
        }
    }

    out <== state[0];
}


// 主模板，用于验证
// public: hash
// private: preImage
template Main() {
    signal input preImage;
    signal input hash;

    component hasher = Poseidon2_t3();
    hasher.in[0] <== preImage;

    // 约束：计算出的哈希值必须与公开的哈希值相等
    hash === hasher.out;
}

component main = Main();
